{"[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree", "AdaBoostClassifier(n_estimators=100, random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree", "AdaBoostClassifier(n_estimators=100, random_state=0)", "Decision Tree", "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree", "AdaBoostClassifier(n_estimators=100, random_state=0)", "Decision Tree", "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)", "Decision Tree", "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree", "AdaBoostClassifier(n_estimators=100, random_state=0)", "Decision Tree", "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)", "Decision Tree", "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier", "Decision Tree", "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0, 81.0]": {"model": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0, 81.0], "accuracy": [76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["KNeighborsClassifier", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "KNeighborsClassifier", "Decision Tree", "DecisionTreeClassifier(max_depth=5)", "Decision Tree", "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)", "Decision Tree", "AdaBoostClassifier()", "Decision Tree", "GaussianNB()", "Decision Tree", "Decision Tree", "Decision Tree", "LinearDiscriminantAnalysis()", "Decision Tree", "QuadraticDiscriminantAnalysis()", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "GradientBoostingClassifier(random_state=0)", "Decision Tree", "LogisticRegression()", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))", "Decision Tree", "OneVsRestClassifier(SVC())", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))", "Decision Tree", "Perceptron(tol=1e-3, random_state=0)", "Decision Tree", "LogisticRegressionCV(cv=5, random_state=0)", "Decision Tree", "HistGradientBoostingClassifier()", "Decision Tree", "RandomForestClassifier(max_depth=2, random_state=0)", "Decision Tree", "ExtraTreesClassifier(n_estimators=100, random_state=0)", "Decision Tree", "AdaBoostClassifier(n_estimators=100, random_state=0)", "Decision Tree", "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)", "Decision Tree", "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier", "Decision Tree", "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier", "Decision Tree", "11", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0]": {"model": [74.0], "accuracy": [74.0], "method": ["IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0]": {"model": [74.0, 67.0], "accuracy": [74.0, 67.0], "method": ["IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0]": {"model": [74.0, 67.0, 67.0], "accuracy": [74.0, 67.0, 67.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0]": {"model": [74.0, 67.0, 67.0, 67.0], "accuracy": [74.0, 67.0, 67.0, 67.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "RidgeClassifier()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "RidgeClassifier()", "Decision Tree", "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "RidgeClassifier()", "Decision Tree", "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])", "Decision Tree", "OneVsOneClassifier(LinearSVC(random_state=0))", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0, 81.0]": {"model": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0, 81.0], "accuracy": [74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)", "Decision Tree", "RidgeClassifier()", "Decision Tree", "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])", "Decision Tree", "OneVsOneClassifier(LinearSVC(random_state=0))", "Decision Tree", "OutputCodeClassifier(estimator=RandomForestClassifier(random_state=0),random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0]": {"model": [76.0], "accuracy": [76.0], "method": ["IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0]": {"model": [76.0, 62.0], "accuracy": [76.0, 62.0], "method": ["IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0]": {"model": [76.0, 62.0, 62.0], "accuracy": [76.0, 62.0, 62.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0]": {"model": [76.0, 62.0, 62.0, 62.0], "accuracy": [76.0, 62.0, 62.0, 62.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree", "NearestCentroid()", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree", "NearestCentroid()", "Decision Tree", "MLPClassifier(random_state=1, max_iter=300)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree", "NearestCentroid()", "Decision Tree", "MLPClassifier(random_state=1, max_iter=300)", "Decision Tree", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree", "NearestCentroid()", "Decision Tree", "MLPClassifier(random_state=1, max_iter=300)", "Decision Tree", "Decision Tree", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0, 74.0]": {"model": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0, 74.0], "accuracy": [76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0, 74.0], "method": ["IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base", "IBM Solution Base"], "classifier": ["MultiOutputClassifier(KNeighborsClassifier())", "Decision Tree", "BernoulliNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "CategoricalNB()", "Decision Tree", "ComplementNB()", "Decision Tree", "MultinomialNB()", "Decision Tree", "KNeighborsClassifier(n_neighbors=3)", "Decision Tree", "RadiusNeighborsClassifier(radius=1.0)", "Decision Tree", "NearestCentroid()", "Decision Tree", "MLPClassifier(random_state=1, max_iter=300)", "Decision Tree", "Decision Tree", "Decision Tree", "IterativeImputer(random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n", "Solucao feita a partir do video do behind the code\n"]}, "[80.0]": {"model": [80.0], "accuracy": [80.0], "method": ["IBM Solution Base"], "classifier": ["IterativeImputer(random_state=0)", "Decision Tree"], "description": ["Solucao feita a partir do video do behind the code\n"]}}    81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "KNeighborsClassifier",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "DecisionTreeClassifier(max_depth=5)",
            "Decision Tree",
            "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)",
            "Decision Tree",
            "AdaBoostClassifier()",
            "Decision Tree",
            "GaussianNB()",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree",
            "LinearDiscriminantAnalysis()",
            "Decision Tree",
            "QuadraticDiscriminantAnalysis()",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "LogisticRegression()",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "OneVsRestClassifier(SVC())",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "Perceptron(tol=1e-3, random_state=0)",
            "Decision Tree",
            "LogisticRegressionCV(cv=5, random_state=0)",
            "Decision Tree",
            "HistGradientBoostingClassifier()",
            "Decision Tree",
            "RandomForestClassifier(max_depth=2, random_state=0)",
            "Decision Tree",
            "ExtraTreesClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "AdaBoostClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)",
            "Decision Tree",
            "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0]": {
        "model": [
            76.0,
            74.0,
            80.0,
            80.0,
            65.0,
            80.0,
            80.0,
            74.0,
            40.0,
            38.0,
            75.0,
            74.0,
            74.0,
            41.0,
            81.0,
            81.0,
            75.0,
            74.0,
            76.0,
            76.0,
            76.0,
            79.0,
            79.0,
            76.0,
            57.99999999999999,
            80.0,
            81.0,
            78.0,
            81.0,
            40.0,
            81.0,
            81.0,
            81.0
        ],
        "accuracy": [
            76.0,
            74.0,
            80.0,
            80.0,
            65.0,
            80.0,
            80.0,
            74.0,
            40.0,
            38.0,
            75.0,
            74.0,
            74.0,
            41.0,
            81.0,
            81.0,
            75.0,
            74.0,
            76.0,
            76.0,
            76.0,
            79.0,
            79.0,
            76.0,
            57.99999999999999,
            80.0,
            81.0,
            78.0,
            81.0,
            40.0,
            81.0,
            81.0,
            81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "KNeighborsClassifier",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "DecisionTreeClassifier(max_depth=5)",
            "Decision Tree",
            "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)",
            "Decision Tree",
            "AdaBoostClassifier()",
            "Decision Tree",
            "GaussianNB()",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree",
            "LinearDiscriminantAnalysis()",
            "Decision Tree",
            "QuadraticDiscriminantAnalysis()",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "LogisticRegression()",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "OneVsRestClassifier(SVC())",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "Perceptron(tol=1e-3, random_state=0)",
            "Decision Tree",
            "LogisticRegressionCV(cv=5, random_state=0)",
            "Decision Tree",
            "HistGradientBoostingClassifier()",
            "Decision Tree",
            "RandomForestClassifier(max_depth=2, random_state=0)",
            "Decision Tree",
            "ExtraTreesClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "AdaBoostClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)",
            "Decision Tree",
            "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
            "Decision Tree",
            "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 74.0, 80.0, 80.0, 65.0, 80.0, 80.0, 74.0, 40.0, 38.0, 75.0, 74.0, 74.0, 41.0, 81.0, 81.0, 75.0, 74.0, 76.0, 76.0, 76.0, 79.0, 79.0, 76.0, 57.99999999999999, 80.0, 81.0, 78.0, 81.0, 40.0, 81.0, 81.0, 81.0, 81.0]": {
        "model": [
            76.0,
            74.0,
            80.0,
            80.0,
            65.0,
            80.0,
            80.0,
            74.0,
            40.0,
            38.0,
            75.0,
            74.0,
            74.0,
            41.0,
            81.0,
            81.0,
            75.0,
            74.0,
            76.0,
            76.0,
            76.0,
            79.0,
            79.0,
            76.0,
            57.99999999999999,
            80.0,
            81.0,
            78.0,
            81.0,
            40.0,
            81.0,
            81.0,
            81.0,
            81.0
        ],
        "accuracy": [
            76.0,
            74.0,
            80.0,
            80.0,
            65.0,
            80.0,
            80.0,
            74.0,
            40.0,
            38.0,
            75.0,
            74.0,
            74.0,
            41.0,
            81.0,
            81.0,
            75.0,
            74.0,
            76.0,
            76.0,
            76.0,
            79.0,
            79.0,
            76.0,
            57.99999999999999,
            80.0,
            81.0,
            78.0,
            81.0,
            40.0,
            81.0,
            81.0,
            81.0,
            81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "KNeighborsClassifier",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "KNeighborsClassifier",
            "Decision Tree",
            "DecisionTreeClassifier(max_depth=5)",
            "Decision Tree",
            "RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)",
            "Decision Tree",
            "AdaBoostClassifier()",
            "Decision Tree",
            "GaussianNB()",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree",
            "LinearDiscriminantAnalysis()",
            "Decision Tree",
            "QuadraticDiscriminantAnalysis()",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "GradientBoostingClassifier(random_state=0)",
            "Decision Tree",
            "LogisticRegression()",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))",
            "Decision Tree",
            "OneVsRestClassifier(SVC())",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "make_pipeline(StandardScaler(),SGDClassifier(max_iter=1000, tol=1e-3))",
            "Decision Tree",
            "Perceptron(tol=1e-3, random_state=0)",
            "Decision Tree",
            "LogisticRegressionCV(cv=5, random_state=0)",
            "Decision Tree",
            "HistGradientBoostingClassifier()",
            "Decision Tree",
            "RandomForestClassifier(max_depth=2, random_state=0)",
            "Decision Tree",
            "ExtraTreesClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "AdaBoostClassifier(n_estimators=100, random_state=0)",
            "Decision Tree",
            "BaggingClassifier(base_estimator=SVC(),n_estimators=10, random_state=0).fit(X, y)",
            "Decision Tree",
            "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
            "Decision Tree",
            "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
            "Decision Tree",
            "11",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0]": {
        "model": [
            74.0
        ],
        "accuracy": [
            74.0
        ],
        "method": [
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0]": {
        "model": [
            74.0,
            67.0
        ],
        "accuracy": [
            74.0,
            67.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0]": {
        "model": [
            74.0,
            67.0,
            67.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "RidgeClassifier()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "RidgeClassifier()",
            "Decision Tree",
            "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0,
            81.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0,
            81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "RidgeClassifier()",
            "Decision Tree",
            "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])",
            "Decision Tree",
            "OneVsOneClassifier(LinearSVC(random_state=0))",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[74.0, 67.0, 67.0, 67.0, 67.0, 71.0, 71.0, 71.0, 81.0, 81.0]": {
        "model": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0,
            81.0,
            81.0
        ],
        "accuracy": [
            74.0,
            67.0,
            67.0,
            67.0,
            67.0,
            71.0,
            71.0,
            71.0,
            81.0,
            81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "PassiveAggressiveClassifier(max_iter=1000, random_state=0,tol=1e-3)",
            "Decision Tree",
            "RidgeClassifier()",
            "Decision Tree",
            "RidgeClassifierC V(alphas=[1e-3, 1e-2, 1e-1, 1])",
            "Decision Tree",
            "OneVsOneClassifier(LinearSVC(random_state=0))",
            "Decision Tree",
            "OutputCodeClassifier(estimator=RandomForestClassifier(random_state=0),random_state=0)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0]": {
        "model": [
            76.0
        ],
        "accuracy": [
            76.0
        ],
        "method": [
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0]": {
        "model": [
            76.0,
            62.0
        ],
        "accuracy": [
            76.0,
            62.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0]": {
        "model": [
            76.0,
            62.0,
            62.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree",
            "NearestCentroid()",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree",
            "NearestCentroid()",
            "Decision Tree",
            "MLPClassifier(random_state=1, max_iter=300)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree",
            "NearestCentroid()",
            "Decision Tree",
            "MLPClassifier(random_state=1, max_iter=300)",
            "Decision Tree",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0,
            74.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0,
            74.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree",
            "NearestCentroid()",
            "Decision Tree",
            "MLPClassifier(random_state=1, max_iter=300)",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    },
    "[76.0, 62.0, 62.0, 62.0, 62.0, 63.0, 74.0, 74.0, 62.0, 81.0, 74.0, 74.0, 74.0]": {
        "model": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0,
            74.0,
            74.0
        ],
        "accuracy": [
            76.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            74.0,
            74.0,
            62.0,
            81.0,
            74.0,
            74.0,
            74.0
        ],
        "method": [
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base",
            "IBM Solution Base"
        ],
        "classifier": [
            "MultiOutputClassifier(KNeighborsClassifier())",
            "Decision Tree",
            "BernoulliNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "CategoricalNB()",
            "Decision Tree",
            "ComplementNB()",
            "Decision Tree",
            "MultinomialNB()",
            "Decision Tree",
            "KNeighborsClassifier(n_neighbors=3)",
            "Decision Tree",
            "RadiusNeighborsClassifier(radius=1.0)",
            "Decision Tree",
            "NearestCentroid()",
            "Decision Tree",
            "MLPClassifier(random_state=1, max_iter=300)",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree",
            "IterativeImputer(random_state=0)",
            "Decision Tree"
        ],
        "description": [
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n",
            "Solucao feita a partir do video do behind the code\n"
        ]
    }
}
